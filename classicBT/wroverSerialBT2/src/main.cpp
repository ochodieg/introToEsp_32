#include <Arduino.h>          // necessary
#include <BluetoothSerial.h>  
#include <Wire.h>             // I2c
#include <Adafruit_GFX.h>     // graphics
#include <Adafruit_SSD1306.h> // oled

/******************************** BLUETOOTH ********************************/
BluetoothSerial phoneInput;  // bt object

/********************************** OLED **********************************/
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306  oled (
    SCREEN_WIDTH,
    SCREEN_HEIGHT,
    &Wire,
    -1);

/******** SERIAL COMMS FIELDS ******/
const byte numChars = 255;    // global field of type 'byte' (used to determin array length)
char receivedChars[numChars]; // array of chars where input will go
boolean newData = false;      // flag determines when we have acquired input
const String picString = "picture";// comparison variable determines an oled output

/******** ANIMATION FIELDS ********/
//oled image 1
static const uint8_t image_data_isshin1[1040] = {
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙█████████████∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███∙∙∙∙∙∙∙∙∙∙∙██████████████∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙████∙∙∙∙∙∙∙∙∙███████████████∙∙∙∙∙∙∙∙∙∙███∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙████∙∙∙∙∙∙∙∙████████████████∙∙∙∙∙∙∙∙███∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙∙∙∙∙∙█████████████████∙∙∙∙∙∙█████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙∙∙∙∙█∙███████████████∙∙∙∙∙██████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████∙∙∙█████████████████∙∙∙∙██████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████∙∙∙█████████████████∙∙∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████∙∙█████████████████∙∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙███████∙█████████████████∙███████∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███∙██████∙█████████████████∙██████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙████∙█████∙█████████████████∙█████∙██∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙████∙█████████████████∙████∙∙█∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙∙█∙∙████████∙█████████∙█∙∙█████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████∙∙∙███████████████████∙∙∙██████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙█████████████████████████████████∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙███████████████████████████████████████∙█∙██████████████████████████████████∙∙∙█████████████████████████████████████████████∙∙
    // ∙∙███████████████████████████████████████∙█████████████████∙█∙█████████████████∙██████████████████████████████████████████████∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████∙█████████∙∙██∙████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙████████████∙∙∙∙███∙∙∙∙████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████∙█████∙∙∙███∙∙∙█████∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙████████∙∙∙∙∙█∙█████∙█∙∙∙∙∙∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙██████████∙∙█████∙∙██████████∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙██████████∙∙∙█████∙∙∙██████████∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙████████∙███████∙████████∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙█∙∙∙∙∙∙∙∙∙∙███████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙█∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙█∙∙∙∙∙∙∙∙∙∙∙████∙███∙∙████████∙█∙∙∙∙██∙████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙█∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙█∙█∙∙∙∙∙∙∙∙∙∙∙█∙∙█∙∙∙█∙∙∙∙∙∙∙∙∙∙∙█████∙██∙█████████∙████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙█∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙█∙█∙∙∙∙█∙∙∙∙∙∙█∙∙█∙∙█∙∙∙∙∙∙█∙∙∙∙∙∙███████∙██████████████∙∙∙█∙███∙∙█∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙█∙█∙∙∙∙█∙∙∙∙∙∙█∙∙███∙∙∙∙∙∙∙∙∙██∙∙∙██████∙██████∙███████∙∙███∙██∙∙█∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙█∙█∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙████████∙∙∙∙∙∙∙∙∙∙∙∙∙███████████∙███████∙█∙███████∙∙█████∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙█∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███∙███∙████∙█████████∙█∙█∙∙∙█∙∙∙∙∙∙∙∙∙∙███∙∙██∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████████∙████████∙███∙█∙∙█∙∙∙∙█∙∙∙∙∙∙∙∙█∙█∙∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙███∙∙∙∙∙∙∙██∙∙∙∙∙∙∙█████∙█∙∙∙∙∙████████████████████∙∙∙██∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙████∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙███████∙∙█∙███████∙█████∙∙∙∙∙███∙∙∙∙∙∙∙∙█∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙█∙█∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙██████∙█∙█████∙█∙∙██∙█∙∙∙∙∙∙██∙∙∙∙∙∙█∙█∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙███∙█∙██∙∙∙∙∙∙∙█████∙█∙∙∙∙∙█∙∙∙∙∙∙∙█∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙█∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙█∙∙█∙∙█∙█∙∙∙∙∙∙∙∙█████∙∙∙∙∙██∙∙∙█∙∙∙∙∙∙█∙∙∙∙∙█∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙█∙██∙∙∙∙∙∙█∙∙∙∙∙∙∙∙██∙∙█∙∙∙∙█∙∙∙∙∙∙██∙██████∙██████∙██∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙█∙∙∙∙∙∙█∙∙∙∙∙∙∙█∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙██∙∙███████████∙█∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████████████∙██∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙██████∙██∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████████∙████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙
    // ∙∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙∙█∙█████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙∙
    // ∙∙████████████████████████████████████████████████████∙██∙█∙∙∙███∙█∙██████████████████████████████████████████████████████████∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙██∙██∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙████∙█∙████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███∙█∙∙████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0xff, 0xe0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0xff, 0xf0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xff, 0xf0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xff, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x0f, 0xff, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x0b, 0xff, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x8f, 0xff, 0xf8, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x8f, 0xff, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xcf, 0xff, 0xf9, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xef, 0xff, 0xfb, 0xf8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xef, 0xff, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xef, 0xff, 0xfb, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xef, 0xff, 0xfb, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0xf7, 0xfd, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1f, 0xff, 0xfc, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xeb, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0xcd, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x1c, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xdf, 0x1c, 0x7d, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0xbe, 0x81, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xff, 0x3e, 0x7f, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x27, 0xfe, 0x3e, 0x3f, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x06, 0xff, 0x7f, 0x7f, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x02, 0x20, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x09, 0x00, 0x04, 0x40, 0x07, 0xb9, 0xfe, 0x86, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x14, 0x04, 
    0x30, 0x0a, 0x00, 0x24, 0x40, 0x07, 0xdb, 0xfe, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x24, 0x04, 
    0x30, 0x0a, 0x10, 0x24, 0x81, 0x03, 0xfb, 0xff, 0xf1, 0x72, 0x00, 0x20, 0x03, 0x00, 0x20, 0x04, 
    0x30, 0x0a, 0x10, 0x27, 0x00, 0x63, 0xf7, 0xef, 0xe7, 0x64, 0x00, 0x20, 0x00, 0x0c, 0x28, 0x04, 
    0x30, 0x00, 0x08, 0x7f, 0x80, 0x03, 0xff, 0xbf, 0xaf, 0xe7, 0xd0, 0x00, 0x00, 0x10, 0x00, 0x04, 
    0x30, 0x00, 0x08, 0x88, 0x00, 0x01, 0xdd, 0xef, 0xfa, 0x88, 0x01, 0xcc, 0x00, 0x20, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x08, 0x00, 0x01, 0xff, 0xdf, 0xee, 0x90, 0x80, 0x50, 0x00, 0xc0, 0x00, 0x04, 
    0x30, 0x00, 0x70, 0x18, 0x0f, 0xa0, 0xff, 0xff, 0xf1, 0x80, 0x80, 0x60, 0x00, 0x20, 0x00, 0x04, 
    0x30, 0x00, 0x08, 0x78, 0x00, 0x40, 0xfe, 0x5f, 0xdf, 0x07, 0x00, 0x90, 0x00, 0x10, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x94, 0x00, 0x80, 0x3f, 0x5f, 0x4d, 0x03, 0x02, 0x90, 0x00, 0x30, 0x00, 0x04, 
    0x30, 0x00, 0x13, 0x00, 0x03, 0x00, 0x3a, 0xc0, 0x7d, 0x04, 0x04, 0x08, 0x00, 0x98, 0x00, 0x04, 
    0x30, 0x00, 0x60, 0x20, 0x06, 0x00, 0x92, 0x80, 0x7c, 0x18, 0x81, 0x05, 0x80, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0xb0, 0x20, 0x19, 0x08, 0x1b, 0xf7, 0xec, 0x00, 0x61, 0x02, 0x02, 0x20, 0x00, 0x04, 
    0x30, 0x01, 0x08, 0x00, 0x00, 0x60, 0x0c, 0xff, 0xea, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x04, 
    0x30, 0x02, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0xfb, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xa3, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf6, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xd7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xa7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//oled image 2
static const uint8_t image_data_isshin2[1054] = {
    // █████████████████████████████████████████∙█████████████████████████████████████████∙∙█████████████████████████████████████████████
    // ████████████████████████████████████████∙∙∙███████████████████████████████████████∙∙∙∙████████████████████████████████████████████
    // ███████████████████████████████████████∙∙∙∙∙█████████████████████████████████████∙∙∙∙∙████████████████████████████████████████████
    // ████████████████████████████████████████∙██∙∙∙█████████████████████████████████∙∙∙██∙█████████████████████████████████████████████
    // ████████████████████████████████████████∙∙██∙∙∙███████████████████████████████∙∙∙██∙∙█████████████████████████████████████████████
    // █████████████████████████████████████████∙████∙∙∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙███████∙∙∙████∙∙█████████████████████████████████████████████
    // █████████████████████████████████████████∙∙█████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙∙██████████████████████████████████████████████
    // ██████████████████████████████████████████∙∙██████∙∙∙∙∙███∙∙█████∙∙∙██∙∙∙∙∙██████∙∙███████████████████████████████████████████████
    // ███████████████████████████████████████████∙∙███████∙∙██∙∙█████████∙∙██∙∙███████∙∙████████████████████████████████████████████████
    // ███████████████████████████████████████████∙∙∙███████∙∙∙∙█████∙█████∙██∙███████∙∙∙████████████████████████████████████████████████
    // █∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙█∙∙∙∙█∙█∙████∙████∙█████∙█∙∙∙∙█∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██
    // █████████████████████████████████████████████████████∙█∙█████∙███∙█∙███∙██████████████████████████████████████████████████████████
    // █████████████████████████████████████████████████████∙█∙███∙█∙████████∙██████████████████████████████████████████████████████████∙
    // █████████████████████████████████████████████∙∙∙∙∙∙∙∙█∙██∙██████∙████∙∙█∙∙∙∙∙█∙∙█████████████████████████████████████████████████∙
    // ███∙█████████████████████████████████████████∙∙██∙∙∙█∙∙███∙████∙█∙████∙∙∙█∙∙██∙∙█████████████████████████████████████████████∙∙██∙
    // █████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙████████████████∙∙∙∙∙∙∙∙∙██████████████████████████████████████████████∙██∙
    // ████∙███████████████████████████████████████∙∙∙∙∙∙∙∙∙█∙███████████████∙█∙∙∙∙∙∙█∙∙███████████████████████████████████████████∙█∙██∙
    // ████████████████████████████████████████████∙∙██∙∙████∙███████████████∙████∙∙██∙∙█████████████████████████████████████████████∙██∙
    // ████████████████████████████████████████████∙∙█∙∙█████∙███████████████∙█████∙∙█∙∙█████████████████████████████████████████████∙██∙
    // ███████████∙██∙█████████████████████████████∙∙█∙∙█████∙███████████████∙█████∙∙█∙∙████████████████████████████████████∙██∙█████∙██∙
    // ████████████∙██∙██████████████∙█████████∙∙██∙∙∙∙∙█████∙∙████∙████████∙∙█∙████∙∙∙∙██████∙██████████████████████████████████████∙██∙
    // █████████∙██∙██∙███∙█████∙███∙██████████████∙█∙∙∙███∙██∙███████∙█∙∙██∙███∙∙█∙∙∙∙∙███████∙██████████████∙██████████████████████∙██∙
    // █████████∙██∙████████∙███∙█∙∙███████████████∙█∙█∙████∙█∙∙████∙████∙█∙∙███∙██∙█∙∙∙████∙███████████████████████∙████████∙██∙████∙██∙
    // ████████████████████∙∙██∙██∙██∙████████∙∙∙██∙█∙█∙█∙████∙∙█∙█████████∙∙██∙∙██∙███∙∙███∙█∙█∙██████████████∙██∙∙████████∙██∙█████∙██∙
    // ███████████████████∙███████████∙███████████∙∙█∙█∙∙██∙████████████∙█∙████∙██∙∙█∙█∙∙█∙∙██████∙███████████∙██∙███████████████████∙██∙
    // █████████████████∙█████∙██∙███████∙████∙███∙∙█∙██∙███████∙∙█∙∙█████∙█∙█∙███∙██∙█∙∙███████∙█∙██████████∙██∙████████████████████∙██∙
    // ██████████████████████∙████████████∙∙∙███∙█∙∙█∙∙██∙████████∙∙███∙∙████████∙∙██∙█∙∙██∙██∙█████∙████████████████████████████████∙██∙
    // ████████████████∙██∙█████∙██████████∙██∙███∙∙∙∙∙██∙∙████████∙∙∙∙∙█████████∙██∙∙∙█∙█∙██∙███∙████████∙███████∙█∙████████████████∙██∙
    // ████████████████∙██∙█████∙████████∙████████∙∙∙█∙∙███∙∙███∙█∙██∙∙██∙∙∙███∙█∙█∙∙█∙∙∙███∙██████∙█████∙██∙█████∙██████████████████∙██∙
    // ██████████████████∙██∙∙██████████∙██∙∙█████∙∙█∙∙█∙███∙∙█∙█∙██∙∙∙██∙∙∙█∙∙███∙∙∙∙█∙∙███∙███∙██∙███████∙█∙██████∙████████████████∙██∙
    // ██████████████████████∙█∙██████∙███∙█∙█████∙∙█∙∙██∙∙∙███████∙∙∙∙████████∙█∙∙∙█∙██∙███████∙█∙██∙████∙████∙█∙███████████████████∙██∙
    // ███████████████∙████████∙█████∙████████∙∙██∙∙∙∙██∙∙∙∙∙∙∙█∙∙██∙∙∙█∙∙∙∙∙∙∙∙██∙██∙∙█∙██∙████████∙████∙██∙∙███████████████████████∙██∙
    // █████████████∙∙██∙██████████████∙████∙█████∙∙∙∙██∙∙∙∙███∙∙∙∙∙∙∙∙█∙∙∙∙∙∙█∙∙██∙█∙∙∙∙██∙█████∙∙██████████████∙███████████████████∙██∙
    // ███████████████████████████████∙██████∙∙∙∙█∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙█∙∙∙∙∙∙███∙∙∙∙█∙████████████████████∙█████████████████████∙██∙
    // ████████████████∙███████████████████████████∙∙∙∙███∙∙∙∙∙∙∙∙∙∙█∙█∙∙∙∙█∙∙∙∙∙███∙∙∙∙█████████████████████████████████████████████∙██∙
    // █████████████████████∙∙∙∙∙∙█████████████████∙∙∙∙█████∙∙∙∙∙∙∙∙█∙█∙∙█∙∙∙∙∙█████∙∙∙∙█████████████████████████████████████████████∙██∙
    // █████████████████████████████████████████████∙∙∙███████████∙∙█∙█∙∙███████████∙∙∙██████████████████████████████████████████████∙██∙
    // ██████████████████████████████████████████████∙∙∙███████∙∙∙∙∙█∙█∙∙∙∙∙███████∙∙∙███████████████████████████████████████████████∙██∙
    // ███████████████████████████████████████████████∙∙█████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████∙∙∙███████████████████████████████████████████████∙██∙
    // ████∙██████████████████████████████████████████∙∙∙██∙∙∙∙∙█∙∙∙∙∙∙∙∙∙█∙∙∙∙∙██∙∙∙██████████████████████████████████████████████∙█∙██∙
    // ███████████████████████████████████████████████∙∙█∙████∙█∙∙█∙█∙█∙█∙∙█∙████∙█∙∙████████████████████████████████████████████████∙██∙
    // ███∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙█∙███∙██∙∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██∙
    // █████████████████████████████████████████████████████∙██████∙████████████████████████████████████████████████████████████████████∙
    // ██████████████████████████████████████████████████████████∙█∙█████∙██████████████████████████████████████████████████████████████∙
    // █████████████████████████████████████████████████∙∙∙██████∙███████∙∙∙∙███∙∙∙██████████████████████████████████████████████████████
    // █████████████████████████████████████████████████∙∙██∙██∙∙█∙█████∙∙∙∙∙∙███∙∙██████████████████████████████████████████████████████
    // █████████████████████████████████████████████████∙∙███∙∙∙█∙███████∙∙∙∙∙∙██∙∙██████████████████████████████████████████████████████
    // ████████████████████████████████████████████████∙∙██∙∙∙∙∙∙∙∙██∙██∙∙∙∙∙∙∙∙██∙∙█████████████████████████████████████████████████████
    // ████████████████████████████████████████████████∙∙█∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙█∙∙█████████████████████████████████████████████████████
    // ███████████████████████████████████████████████∙∙█∙∙∙█∙∙∙██∙∙∙∙∙∙∙██∙∙∙█∙∙∙█∙∙████████████████████████████████████████████████████
    // ███████████████████████████████████████████████∙∙∙∙█∙∙∙∙∙███∙∙∙∙∙███∙∙∙∙∙█∙∙∙∙████████████████████████████████████████████████████
    // ██████████████████████████████████████████████∙∙∙∙██∙∙█∙∙∙█∙∙∙∙∙∙∙██∙∙█∙∙███∙∙∙███████████████████████████████████████████████████
    // ██████████████████████████████████████████████∙∙█████∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙█████∙∙∙██████████████████████████████████████████████████
    // █████████████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████████████████████████████████████████████████████████
    // █████████████████████████████████████████████████████∙∙∙∙∙█∙∙∙∙∙∙∙█∙∙∙∙∙██████████████████████████████████████████████████████████
    // ██████████████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████████████████████████████████████████████████████████
    // ██████████████████████████████████████████████████████∙∙█∙∙∙∙∙∙∙∙∙∙∙█∙∙███████████████████████████████████████████████████████████
    // ██████████████████████████████████████████████████████∙∙█████████████∙∙███████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████∙∙███████████∙∙████████████████████████████████████████████████████████████
    // ████████████████████████████████████████████████████████∙∙████∙████∙∙█████████████████████████████████████████████████████████████
    // █████████████████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙██████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████∙∙∙∙∙∙∙████████████████████████████████████████████████████████████████
    0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x63, 0xff, 0xff, 0xff, 0xfe, 0x37, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x31, 0xff, 0xff, 0xff, 0xfc, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0x7f, 0x00, 0x07, 0xf1, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x00, 0x00, 0x00, 0x07, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xc1, 0xcf, 0x8c, 0x1f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf3, 0x3f, 0xe6, 0x7f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xf8, 0x7d, 0xf6, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0x80, 0x00, 0x00, 0x00, 0x00, 0x11, 0x0a, 0xf7, 0xbe, 0x84, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xfb, 0xae, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x05, 0xbf, 0x79, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
    0xef, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x89, 0xde, 0xbc, 0x4c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xf7, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x05, 0xff, 0xfd, 0x02, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x3d, 0xff, 0xfd, 0xe6, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0x7d, 0xff, 0xfd, 0xf2, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xed, 0xff, 0xff, 0xff, 0xf2, 0x7d, 0xff, 0xfd, 0xf2, 0x7f, 0xff, 0xff, 0xff, 0xfb, 0x7d, 0x80, 
    0xff, 0xf6, 0xff, 0xfd, 0xff, 0x30, 0x7c, 0xf7, 0xf9, 0x78, 0x7e, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xb6, 0xef, 0xbb, 0xff, 0xf4, 0x76, 0xfe, 0x9b, 0x90, 0x7f, 0x7f, 0xfe, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xb7, 0xfb, 0xa7, 0xff, 0xf5, 0x7a, 0x7b, 0xd3, 0xb4, 0x7b, 0xff, 0xff, 0xfb, 0xfd, 0xbd, 0x80, 
    0xff, 0xff, 0xf3, 0x6d, 0xfe, 0x35, 0x5e, 0x5f, 0xf3, 0x37, 0x3a, 0xbf, 0xff, 0x67, 0xfb, 0x7d, 0x80, 
    0xff, 0xff, 0xef, 0xfe, 0xff, 0xe5, 0x37, 0xff, 0xaf, 0x65, 0x27, 0xef, 0xfe, 0xdf, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xbe, 0xdf, 0xde, 0xe5, 0xbf, 0x93, 0xea, 0xed, 0x3f, 0xaf, 0xfd, 0xbf, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xfd, 0xff, 0xe3, 0xa4, 0xdf, 0xe7, 0x3f, 0xcd, 0x36, 0xfb, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0x6f, 0xbf, 0xf6, 0xe0, 0xcf, 0xf0, 0x7f, 0xd8, 0xad, 0xdf, 0xef, 0xeb, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0x6f, 0xbf, 0xdf, 0xe2, 0x73, 0xac, 0xc7, 0x52, 0x3b, 0xf7, 0xdb, 0xef, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xd9, 0xff, 0xb3, 0xe4, 0xb9, 0x58, 0xc4, 0xe1, 0x3b, 0xb7, 0xf5, 0xfb, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xfd, 0x7e, 0xeb, 0xe4, 0xc7, 0xf0, 0xff, 0x45, 0xbf, 0xad, 0xef, 0x5f, 0xff, 0xfd, 0x80, 
    0xff, 0xfe, 0xff, 0x7d, 0xfe, 0x61, 0x80, 0x98, 0x80, 0x6c, 0xb7, 0xfb, 0xd9, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xf9, 0xbf, 0xff, 0x7b, 0xe1, 0x87, 0x00, 0x81, 0x34, 0x37, 0xcf, 0xff, 0xdf, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xff, 0xfe, 0xfc, 0x20, 0xc0, 0x02, 0x08, 0x1c, 0x2f, 0xff, 0xff, 0x7f, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0x7f, 0xff, 0xff, 0xf0, 0xe0, 0x05, 0x08, 0x38, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xf8, 0x1f, 0xff, 0xf0, 0xf8, 0x05, 0x20, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xe5, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x05, 0x07, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 0x01, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xf7, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 0x40, 0x10, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x5e, 0x95, 0x4b, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x80, 
    0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xdf, 0xc3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9b, 0x2f, 0x81, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x5f, 0xc0, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x0d, 0x80, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x01, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x44, 0x60, 0x31, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x10, 0x70, 0x70, 0x43, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x32, 0x20, 0x32, 0x71, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfa, 0x00, 0x02, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x20, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
//adafruit animation
static const unsigned char PROGMEM logo_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };
#define NUMFLAKES     10 // Number of snowflakes in the animation 
#define LOGO_HEIGHT   16 
#define LOGO_WIDTH    16
#define XPOS           0 // Indexes into the 'icons' array in function below
#define YPOS           1
#define DELTAY         2

/*************************** OTHER FIELDS *****************************/
#define led 2 // onboard led

/************************ INITIALIZE METHODS **************************/
// this is required specifically for platformio
void blinkLong();
void blinkShort();
void testAnimate(const uint8_t *bitmap, uint8_t w, uint8_t h);
void clear();
void startUp();
void isshin1();
void isshin2();
void getMsg();
void showMsg();
////////////////////////////////////////////////////////////////////////////
void recvWithEndMarker();
void showNewData();
/////////////////////////////////////////////


/************************************************************************************/
/************************************ START MAIN ************************************/
/************************************************************************************/
void setup() {
  pinMode(led, OUTPUT);   // set led as output

  /****** Begin all Comms ******/
  Serial.begin(115200);
  phoneInput.begin("lil' guy"); // give bt device a name

  /** Initialize oled object **/
  // address indicates default I2C pins?
  if(!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)){  // if oled doesnt initialize (0x3c is serial address?)
    Serial.println(F("SSD1306 allocation failure"));
    for(;;)blinkLong();
  }
  
  // give oled a moment
  delay(2000); 
  // set oled
  clear();
  oled.setTextSize(2);
  oled.setTextColor(WHITE);
  
  // confirm successful init
  startUp();
  //clear();
}




void loop() {
  // oled.clearDisplay();
  // oled.setCursor(0,0);
  // void getMsg();
  // void showMsg();
  // delay(100);

///////////////////////////////////////////////////////////////////////////////////////////
  oled.clearDisplay();
  oled.setCursor(0,0);
  recvWithEndMarker();
  showNewData();
  delay(100);
///////////////////////////////////////////////////////////////////////////////////////////

  //oled.clearDisplay();
  //clear();
  //blinkShort();

  //testAnimate(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
  //if(phoneInput.available()>0 && newData == false){
    //blinkShort();
  // void getMsg();
  // void showMsg();
    //}

    
}
/************************************************************************************/
/*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ END MAIN ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/************************************************************************************/


/***************************** LED FLAG METHODS *****************************/
void blinkShort(){
   for(int i = 0; i<3;i++){
    digitalWrite(led, HIGH);
    delay(50);
    digitalWrite(led, LOW);
    delay(50);
  }
}
void blinkLong(){
  for(int i=0; i<3;i++){
    digitalWrite(led, HIGH);
    delay(500);
    digitalWrite(led, LOW);
    delay(500);
  }
}

/****************************** OLED FUNCTIONS ******************************/
// standby animation 
void testAnimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS]   = random(1 - LOGO_WIDTH, oled.width());
    icons[f][YPOS]   = -LOGO_HEIGHT;
    icons[f][DELTAY] = random(1, 6);
    // Serial.print(F("x: "));
    // Serial.print(icons[f][XPOS], DEC);
    // Serial.print(F(" y: "));
    // Serial.print(icons[f][YPOS], DEC);
    // Serial.print(F(" dy: "));
    // Serial.println(icons[f][DELTAY], DEC);
  }

  for(int i =0;i<10;i++) { // Loop forever...
    oled.clearDisplay(); // Clear the display buffer
    //blinkShort();
    // Draw each snowflake:
    for(f=0; f< NUMFLAKES; f++) {
      oled.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, WHITE);
    }

    oled.display(); // Show the display buffer on the screen
    delay(200);        // Pause for 1/10 second

    // Then update coordinates of each flake...
    for(f=0; f< NUMFLAKES; f++) {
      icons[f][YPOS] += icons[f][DELTAY];
      // If snowflake is off the bottom of the screen...
      if (icons[f][YPOS] >= oled.height()) {
        // Reinitialize to a random position, just off the top
        icons[f][XPOS]   = random(1 - LOGO_WIDTH, oled.width());
        icons[f][YPOS]   = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}
// draw 1st logo
void isshin1(){
  digitalWrite(led, HIGH);
  oled.drawBitmap(0, 0, image_data_isshin1, 128, 64, 1);
  oled.display();
  delay(5000);
  digitalWrite(led, LOW);
  clear();
}
// draw 2nd logo
void isshin2(){
  digitalWrite(led, HIGH);
  oled.drawBitmap(0, 0, image_data_isshin2, 128, 64, 1);
  oled.display();
  delay(5000);
  digitalWrite(led, LOW);
  clear();
}
// clear and reset screen
void clear(){
  oled.clearDisplay();            
  oled.setTextSize(2);
  oled.setTextColor(WHITE);
  oled.setCursor(0,0);
  oled.display();
}
// startup message
void startUp(){
  // display logo
  isshin1();
  clear();
  oled.println("SUCESS!");
  oled.display();
  // blink as redundant confirmation
  blinkShort();
  // scroll text fully 
  oled.startscrollright(0x00, 0xFF);
  // allow enough time to scoll
  delay(2000);
  oled.stopscroll();
  delay(500);

  clear();

  oled.println("Type\nSomething!");
  oled.display();
  // blink as redundant confirmation
  blinkShort();
  // scroll text fully 
  oled.startscrollright(0x00, 0xFF);
  // allow enough time to scoll
  delay(2000);
  oled.stopscroll();
  delay(500);
  clear();
}
// obtain input message
void getMsg(){
  // "global" variable of type 'byte' used as array index
  static byte ndex = 0;   // static -> no instantiation req'd
  // deliminator for end of input
  char msgEnd      = '\n';
   // letter concats to string array
  char aLetter;  

  if(phoneInput.available()>0 && newData == false){
    // reading a single char from input
    aLetter = phoneInput.read();   
    blinkShort;
    if(aLetter != msgEnd){            //if character obtained isn't deliminator
      receivedChars[ndex] = aLetter; //add grabbed character to current index in string array
      ndex++;                        //increase position
      if(ndex >= numChars){          // check if array limit reached
        ndex = numChars -1;          // if so, delete last index to keep below limit
    }
  }
  else{                            // else if index is not at array limit
    receivedChars[ndex] = '\0';    // terminate string at current index value (either last index or after last obtained char)
    ndex = 0;
    newData = true;
    }
  }
}
// show input message
void showMsg(){
  if(newData == true){  //if have input
    // create a string copy without whitespace to filter a keyword command
    String receivedString(receivedChars);
    receivedString.trim();
    
    //led confirmation blink
    blinkShort();

    //filter keyword command
    if(receivedString == "picture"){// if keyword received
      clear();                      // prep oled
      isshin1();                    // display logo
      newData = false;              // reset input flag
    }
    else{                          // if any other input
      blinkShort();                 // led notification
      clear();                      // clear oled
      oled.write(receivedChars);    // write input to output
      oled.display();               // display output
      delay(2000);                  // enough time to scroll
      oled.startscrollright(0x00, 0xFF);// scroll text
      delay(2000);                  // enough time to scroll 
      oled.stopscroll();            // end scroll
      delay(500);                   // small delay
      clear();                      // reset oled
      delay(500);
      newData = false;
    }
  }
}



////////////////////////////////////////////////////////////////////////////////////////////


void recvWithEndMarker(){
  static byte ndx =0;   //index???
  char endMarker = '\n';//deliminator
  char aLetter; // letter to add to string array

   if (phoneInput.available()>0 && newData == false){
    aLetter = phoneInput.read();  // reading single character?

    if(aLetter != endMarker){      // if new character is not the deliminator
      receivedChars[ndx] = aLetter;// add character to current index
      ndx++;                       // increase index
      if(ndx >= numChars){         // if the index has surpassed limit
        ndx = numChars -1;         // reset index to just below limit
      }
    }
    else{                         // else if index is not at limit
      receivedChars[ndx] = '\0';  // terminating string
      ndx = 0;                    // resetting index
      newData = true;             // there is something to print
    }

  }
}


void showNewData(){
  //char[255] pic = 'pcture';
  
  
  if(newData == true){
    String receivedString(receivedChars);
    //String receivedString = trim(String(receivedChars));
    receivedString.trim();
    
    //initStart(led);

    //serialMimmic.print(char(receivedChar));
    ///serialMimmic.write(btComm.read());
    ///serialMimmic.display(); 
    ///delay(1000);
    if (receivedString == "picture"){
      oled.clearDisplay();
      oled.setCursor(0,0);
      oled.drawBitmap(0, 0, image_data_isshin1, 128, 64, 1);
      oled.display();
      delay(5000);
      oled.clearDisplay();
      oled.setCursor(0,0);
      newData = false;
    }
    else{
      // if(strcmp(receivedChars, "picture")==0){
      // }
      oled.clearDisplay();
      oled.setCursor(0,0);
      ////serialMimmic.write(aWord);
      oled.write(receivedChars);
      oled.display(); 
      delay(1000);
      newData = false;
    }  
  }
}
